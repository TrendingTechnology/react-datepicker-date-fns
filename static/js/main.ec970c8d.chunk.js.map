{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["noop","keyMap","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","DatePicker","onChange","onSelect","range","selected","initialSelected","Date","useState","setSelected","focused","setFocused","monthView","setMonthView","start","end","setRange","nextMonth","addMonths","handleSelect","useCallback","x","min","Math","sorted","slice","sort","a","b","getTime","increment","prev","className","onKeyDown","key","daysToAdd","addDays","month","onDayFocus","customHeader","year","onClick","Month","sm","startOfMonth","sfw","startOfWeek","em","endOfMonth","elw","endOfWeek","totalDays","differenceInCalendarDays","weeks","floor","days","times","identity","map","_","idx","format","cx","value","Day","today","isSameDay","grayout","isSameMonth","weekend","isWeekend","inRange","isWithinInterval","isSelected","ref","useRef","useEffect","current","document","activeElement","focus","role","tabIndex","onFocus","MonthSelector","sy","startOfYear","formatter","months","getMonth","target","setMonth","parseInt","YearSelector","fromYear","addYears","years","getYear","setYear","y","App","sampleRange","setSampleRange","console","log","type","readOnly","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec970c8d.chunk.js","sourcesContent":["import { ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { times, identity } from \"ramda\";\nimport {\n  addDays,\n  addMonths,\n  addYears,\n  differenceInCalendarDays,\n  endOfMonth,\n  endOfWeek,\n  format,\n  getMonth,\n  getYear,\n  isSameDay,\n  isSameMonth,\n  isWeekend,\n  isWithinInterval,\n  setMonth,\n  setYear,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n} from \"date-fns/fp\";\n\nimport \"./App.scss\";\ntype Range = [Date | null, Date | null];\nconst noop = () => {};\n\nconst keyMap: Partial<Record<string, number>> = {\n  ArrowUp: -7,\n  ArrowDown: 7,\n  ArrowLeft: -1,\n  ArrowRight: 1,\n};\n\nconst App = () => {\n  const today = new Date();\n  const [sampleRange, setSampleRange] = useState<Range>([\n    addDays(-5, today),\n    addDays(-3, today),\n  ]);\n  return (\n    <div className=\"App\">\n      <DatePicker\n        onChange={(x) => setSampleRange(x)}\n        onSelect={(x) => console.log(x)}\n        range={sampleRange}\n        // selected={addDays(5, new Date())}\n      />\n      <div className=\"inputs-wrapper\">\n        <input\n          type=\"text\"\n          readOnly\n          value={sampleRange\n            .map((x) => (x ? format(\"dd/MM/yyyy\", x) : \"empty\"))\n            .join(\" | \")}\n        />\n        <button onClick={() => setSampleRange([null, null])}>clear</button>\n      </div>\n    </div>\n  );\n};\n\nconst DatePicker = ({\n  onChange = noop,\n  onSelect = noop,\n  range,\n  selected: initialSelected = new Date(),\n}: {\n  onChange?(x: Range): void;\n  onSelect?(x: Date): void;\n  range: Range;\n  selected?: Date;\n}) => {\n  const [selected, setSelected] = useState(initialSelected);\n  const [focused, setFocused] = useState<null | Date>(null);\n  const [monthView, setMonthView] = useState(initialSelected);\n  const [[start, end], setRange] = useState<Range>([null, null]);\n\n  const nextMonth = addMonths(1, monthView);\n\n  const handleSelect = useCallback(\n    (x: Date) => {\n      if (!end) {\n        const min = Math.min();\n        const sorted = [start, x]\n          .slice()\n          .sort(\n            (a, b) => (a?.getTime() ?? min) - (b?.getTime() ?? min)\n          ) as Range;\n        setRange(sorted);\n        onChange(sorted);\n      } else {\n        setRange([x, null]);\n      }\n      setSelected(x);\n      onSelect(x);\n    },\n    [start, end, onChange, onSelect]\n  );\n\n  const increment = (x: number) => () =>\n    setMonthView((prev) => addMonths(x, prev));\n  const handleKeyPress: React.KeyboardEventHandler<HTMLDivElement> = ({\n    key,\n  }) => {\n    const daysToAdd = keyMap[key];\n    if (focused && daysToAdd) {\n      setFocused(addDays(daysToAdd, focused));\n    }\n  };\n\n  return (\n    <div className=\"datepicker\" onKeyDown={handleKeyPress}>\n      <div className=\"months-wrapper\">\n        <Month\n          focused={focused}\n          month={monthView}\n          onDayFocus={setFocused}\n          onSelect={handleSelect}\n          range={range}\n          selected={selected}\n          customHeader={\n            <>\n              <MonthSelector month={monthView} onSelect={setMonthView} />\n              <YearSelector year={monthView} onSelect={setMonthView} />\n            </>\n          }\n        />\n        <Month\n          focused={focused}\n          month={nextMonth}\n          onDayFocus={setFocused}\n          onSelect={handleSelect}\n          range={range}\n          selected={selected}\n        />\n      </div>\n      <div className=\"controls\">\n        <button onClick={increment(-1)}>prev</button>\n        <button onClick={() => setMonthView(new Date())}>today</button>\n        <button onClick={increment(1)}>next</button>\n      </div>\n    </div>\n  );\n};\n\nconst Month = ({\n  month,\n  onSelect: onChange,\n  range,\n  selected,\n  customHeader,\n  onDayFocus,\n  focused,\n}: {\n  range: Range;\n  month: Date;\n  onSelect(x: Date): void;\n  selected: Date | null;\n  customHeader?: ReactNode;\n  onDayFocus(d: Date): void;\n  focused: Date | null;\n}) => {\n  const sm = startOfMonth(month);\n  const sfw = startOfWeek(sm);\n  const em = endOfMonth(sm);\n  const elw = endOfWeek(em);\n  const totalDays = differenceInCalendarDays(sfw, elw) + 1;\n  const weeks = Math.floor(totalDays / 7);\n  const days = times(identity, totalDays).map((_, idx) => addDays(idx, sfw));\n\n  return (\n    <div className=\"month-wrapper\">\n      <div className=\"month-title\">\n        {customHeader ? customHeader : format(\"MMM\", sm)}\n      </div>\n      <div className={cx(\"month\", `weeks-${Math.floor(weeks)}`)}>\n        {days.map((x) => (\n          <Day\n            value={x}\n            month={month}\n            key={x.getTime()}\n            onSelect={onChange}\n            range={range}\n            selected={selected}\n            focused={focused}\n            onDayFocus={onDayFocus}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Day = ({\n  value,\n  month,\n  onSelect: onChange,\n  range: [start, end],\n  selected,\n  onDayFocus,\n  focused,\n}: {\n  value: Date;\n  month: Date;\n  onSelect(x: Date): void;\n  range: Range;\n  selected: Date | null;\n  onDayFocus(d: Date): void;\n  focused: Date | null;\n}) => {\n  const today = isSameDay(value, new Date());\n  const grayout = !isSameMonth(value, month);\n  const weekend = isWeekend(value);\n  const inRange = start && end && isWithinInterval({ start, end }, value);\n  const isSelected = selected && isSameDay(selected, value);\n  const handleKeyDown: React.KeyboardEventHandler<HTMLDivElement> = ({\n    key,\n  }) => {\n    switch (key) {\n      case \"Enter\":\n      case \" \":\n        onChange(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (\n      focused &&\n      ref.current &&\n      isSameDay(focused, value) &&\n      !grayout &&\n      document.activeElement !== ref.current\n    ) {\n      ref.current.focus();\n    }\n  }, [value, focused, grayout]);\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      ref={ref}\n      onFocus={() => onDayFocus(value)}\n      className={cx(\"day\", {\n        today,\n        grayout,\n        weekend,\n        selected: isSelected,\n        \"in-range\": inRange,\n      })}\n      onKeyDown={handleKeyDown}\n      onClick={() => onChange(value)}\n    >\n      {format(\"d\", value)}\n    </div>\n  );\n};\n\nconst MonthSelector = ({\n  month,\n  onSelect = noop,\n}: {\n  month: Date;\n  onSelect?(s: Date): void;\n}) => {\n  const sy = startOfYear(month);\n  const formatter = format(\"MMM\");\n  const months = times(identity, 12).map((_, idx) => addMonths(idx, sy));\n  return (\n    <select\n      value={getMonth(month)}\n      onChange={({ target: { value } }) =>\n        onSelect(setMonth(parseInt(value), month))\n      }\n    >\n      {months.map((x, idx) => (\n        <option key={idx} value={getMonth(x)}>\n          {formatter(x)}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nconst YearSelector = ({\n  year,\n  onSelect = noop,\n}: {\n  year: Date;\n  onSelect?(s: Date): void;\n}) => {\n  const fromYear = addYears(-4, year);\n  const years = times(identity, 10).map((_, idx) => addYears(idx, fromYear));\n\n  return (\n    <select\n      value={getYear(year)}\n      onChange={({ target: { value } }) =>\n        onSelect(setYear(parseInt(value), year))\n      }\n    >\n      {years.map((y, idx) => (\n        <option key={idx}>{format(\"yyyy\", y)}</option>\n      ))}\n    </select>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}